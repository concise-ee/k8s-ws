apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 2
      maxUnavailable: 25%
  selector:
    # defines how the Deployment finds which Pods to manage
    matchLabels:
      app: demo
  template:
    metadata:
      labels:
        app: demo
    spec:
      containers:
        # container image is referenced from GCR (Google Container Registry)
        # make sure your tag (:1 or :2) is corect for the image you are downloading
        - image: eu.gcr.io/k8s-ws-20/my-name:1
          resources:
            # how much resources container is guaranteed to get
            requests:
              # defined in millicores
              cpu: 100m
              memory: 600Mi
            # upper limit that container can acquire even if node has plenty of resources
            limits:
              cpu: 1000m
              memory: 1000Mi
          name: demo
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: STAGING
            - name: JAVA_OPTS
              value: -Xmx256m -Xms256m
          ports:
            - containerPort: 8080
          # used to check if application is healthy, if it fails the pod gets killed and restarted
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 100
            periodSeconds: 20
          # used to check if it is ready (i.e. could route traffic), if it fails, traffic is not routed to this pod
          readinessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
